#ifdef VC_DLL_EXPORTS
#undef VC_DLL_EXPORTS
#define VC_DLL_EXPORTS extern "C" __declspec(dllexport)
#else
#define VC_DLL_EXPORTS extern "C" __declspec(dllimport)
#endif

#ifdef _DEBUG
#ifdef _ARM_
#pragma comment(lib,"../ARM/Debug/ia32.lib")
#else
#ifdef _ARM64_
#pragma comment(lib,"../ARM64/Debug/ia32.lib")
#else
#ifdef _AMD64_
#pragma comment(lib,"../x64/Debug/ia32.lib")
#else
#pragma comment(lib,"../Debug/ia32.lib")
#endif
#endif
#endif
#else
#ifdef _ARM_
#pragma comment(lib,"../ARM/Release/ia32.lib")
#else
#ifdef _ARM64_
#pragma comment(lib,"../ARM64/Release/ia32.lib")
#else
#ifdef _AMD64_
#pragma comment(lib,"../x64/Release/ia32.lib")
#else
#pragma comment(lib,"../Release/ia32.lib")
#endif
#endif
#endif
#endif
VC_DLL_EXPORTS void CPU_SET_EIP(UINT32 value);
VC_DLL_EXPORTS void CPU_SET_CR0(UINT32 src);
VC_DLL_EXPORTS void CPU_SET_CR3(UINT32 value);
VC_DLL_EXPORTS void CPU_SET_CPL(int value);
VC_DLL_EXPORTS void CPU_SET_EFLAG(UINT32 new_flags);
VC_DLL_EXPORTS void CPU_A20_LINE(UINT8 value);
VC_DLL_EXPORTS void CPU_INIT();
VC_DLL_EXPORTS void CPU_RELEASE();
VC_DLL_EXPORTS void CPU_FINISH();
VC_DLL_EXPORTS void CPU_RESET();
VC_DLL_EXPORTS int CPU_EXECUTE();
VC_DLL_EXPORTS void CPU_SOFT_INTERRUPT(int vect);
VC_DLL_EXPORTS void CPU_JMP_FAR(UINT16 new_cs, UINT32 new_ip);
VC_DLL_EXPORTS void CPU_CALL_FAR(UINT16 new_cs, UINT32 new_ip);
VC_DLL_EXPORTS void CPU_IRET();
VC_DLL_EXPORTS void CPU_PUSH(UINT16 reg);
VC_DLL_EXPORTS UINT16 CPU_POP();
VC_DLL_EXPORTS void CPU_PUSHF();
VC_DLL_EXPORTS UINT16 CPU_READ_STACK();
VC_DLL_EXPORTS void CPU_WRITE_STACK(UINT16 reg);
VC_DLL_EXPORTS void CPU_LOAD_LDTR(UINT16 selector);
VC_DLL_EXPORTS void CPU_LOAD_TR(UINT16 selector);
VC_DLL_EXPORTS UINT32 CPU_TRANS_PAGING_ADDR(UINT32 addr);
VC_DLL_EXPORTS void CPU_SET_MACTLFC(UINT32(*ptrformaf) (int, int, int));
VC_DLL_EXPORTS UINT32 CPU_GET_REG(int regid);
VC_DLL_EXPORTS void CPU_SET_REG(int regid, UINT32 regdata);
VC_DLL_EXPORTS void CPU_SET_IRQ(BOOL statforirq);
VC_DLL_EXPORTS void CPU_SET_A20(UINT8 statfora20);
VC_DLL_EXPORTS void CPU_REQ_INTERRUPT(int vect);
VC_DLL_EXPORTS void CPU_REQ_NMINTERRUPT();
VC_DLL_EXPORTS int CPU_EXECUTE_CC(int clockcount);
VC_DLL_EXPORTS UINT32 CPU_GET_SYSREG(int regid);
VC_DLL_EXPORTS void CPU_SET_SYSREG(int regid, UINT32 regdata);
VC_DLL_EXPORTS UINT32 CPU_GET_SYSREG_DESC(int regid);
VC_DLL_EXPORTS void CPU_SET_SYSREG_DESC(int regid, UINT32 regdata);
VC_DLL_EXPORTS UINT32 CPU_GET_SYSREG_LIMIT(int regid);
VC_DLL_EXPORTS void CPU_SET_SYSREG_LIMIT(int regid, UINT32 regdata);
VC_DLL_EXPORTS UINT32 CPU__GET_CR0();
VC_DLL_EXPORTS void CPU__SET_CR0(UINT32 regdata);
VC_DLL_EXPORTS UINT32 CPU__GET_CR1();
VC_DLL_EXPORTS void CPU__SET_CR1(UINT32 regdata);
VC_DLL_EXPORTS UINT32 CPU__GET_CR2();
VC_DLL_EXPORTS void CPU__SET_CR2(UINT32 regdata);
VC_DLL_EXPORTS UINT32 CPU__GET_CR3();
VC_DLL_EXPORTS void CPU__SET_CR3(UINT32 regdata);
VC_DLL_EXPORTS UINT32 CPU__GET_CR4();
VC_DLL_EXPORTS void CPU__SET_CR4(UINT32 regdata);
VC_DLL_EXPORTS UINT16 CPU_GET_LDTR();
VC_DLL_EXPORTS void CPU_SET_LDTR(UINT16 regdata);
VC_DLL_EXPORTS UINT16 CPU_GET_TR();
VC_DLL_EXPORTS void CPU_SET_TR(UINT16 regdata);
VC_DLL_EXPORTS UINT32 CPU__GET_MXCSR();
VC_DLL_EXPORTS void CPU__SET_MXCSR(UINT32 regdata);
VC_DLL_EXPORTS void CPU_SET_SS32(UINT8 statforsq);
VC_DLL_EXPORTS void CPU_SET_PM(UINT8 statforsq);
VC_DLL_EXPORTS void CPU_SET_OP32(UINT8 regdata);
VC_DLL_EXPORTS void CPU_SET_AS32(UINT8 regdata);
VC_DLL_EXPORTS void CPU_SWITCH_PM(BOOL onoff);
VC_DLL_EXPORTS UINT16 CPU_GET_IDTR_LIMIT();
VC_DLL_EXPORTS void CPU_SET_IDTR_LIMIT(UINT16 regdata);
VC_DLL_EXPORTS UINT32 CPU_GET_IDTR_BASE();
VC_DLL_EXPORTS void CPU_SET_IDTR_BASE(UINT32 regdata);
VC_DLL_EXPORTS UINT16 CPU_GET_GDTR_LIMIT();
VC_DLL_EXPORTS void CPU_SET_GDTR_LIMIT(UINT16 regdata);
VC_DLL_EXPORTS UINT32 CPU_GET_GDTR_BASE();
VC_DLL_EXPORTS void CPU_SET_GDTR_BASE(UINT32 regdata);
VC_DLL_EXPORTS void CPU_BUS_SIZE_CHANGE(int size);
VC_DLL_EXPORTS void CPU_REQ_INTERRUPT_IN(int vect);
VC_DLL_EXPORTS void CPU_REQ_NMINTERRUPT_IN();
VC_DLL_EXPORTS void CPU_EXECUTE_INFINITY(void);
VC_DLL_EXPORTS int CPU_GET_REGPTR(int reglno);

